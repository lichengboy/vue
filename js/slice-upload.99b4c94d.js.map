{"version":3,"sources":["webpack:///./src/api/axios.js","webpack:///./src/views/slice-upload.vue","webpack:///./src/api/upload.js","webpack:///src/views/slice-upload.vue","webpack:///./src/views/slice-upload.vue?e846","webpack:///./src/views/slice-upload.vue?2bf2"],"names":["loading","customOptions","isLoading","requestCount","instance","axios","create","baseURL","process","VUE_APP_BASE_URL","timeout","withCredentials","interceptors","request","use","config","headers","Loading","service","lock","text","target","document","querySelector","spinner","background","error","Promise","reject","response","close","responseType","result","msg","data","Message","message","status","url","includes","render","_vm","this","_c","_self","_g","_b","attrs","isType","need","uploadFile","$attrs","$listeners","staticRenderFns","uploadNormal","resolve","method","then","res","catch","err","uploadByPieces","async","file","console","log","chunkSize","chunkCount","Math","ceil","size","getChunkInfo","index","start","end","min","chunk","slice","uploadChunk","readChunk","fetchForm","FormData","append","promiseList","push","all","e","methods","formData","loadingInstance","component"],"mappings":"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","file":"js/slice-upload.99b4c94d.js","sourcesContent":["import axios from \"axios\";\r\n// import qs from 'qs'\r\nimport { Message, Loading } from \"element-ui\";\r\n\r\n/**\r\n * 自定义config参数\r\n * @param isLoading 是否启用全局loading\r\n */\r\nlet customOptions = {\r\n  isLoading: true,\r\n};\r\n// 请求数量\r\nlet requestCount = 0;\r\n// loading实例\r\nlet loading;\r\n\r\nconst instance = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_URL,\r\n  // baseURL: 'http://192.168.57.198:9000/',\r\n  timeout: 10000 * 5,\r\n  withCredentials: true, //跨域携带cookie\r\n  // headers: { 'X-Custom-Header': 'foobar' },\r\n});\r\n// 添加请求拦截器\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    // 在发送请求之前做些什么\r\n    config = { ...customOptions, ...config };\r\n    config.headers[\"Content-Type\"] = \"application/json\";\r\n    requestCount++;\r\n    if (requestCount === 1 && config.isLoading) {\r\n      // loading = Loading.service()\r\n      loading = Loading.service({\r\n        lock: true,\r\n        text: \"Loading\",\r\n        target: document.querySelector(\".el-main\"),\r\n        spinner: \"el-icon-loading\",\r\n        background: \"rgba(255, 255, 255, 0.7)\",\r\n      });\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // 对请求错误做些什么\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    // console.log(response, 'response')\r\n    // 对响应数据做点什么\r\n    requestCount--;\r\n    if (requestCount === 0 && loading) {\r\n      loading.close();\r\n    }\r\n    // 没有特殊的responseType\r\n    if (!response.config.responseType) {\r\n      const { result, msg } = response.data;\r\n      if (result) return response.data;\r\n      else {\r\n        Message.error(msg);\r\n        return Promise.reject(response.data);\r\n      }\r\n    }\r\n    return response.data;\r\n  },\r\n  (error) => {\r\n    let message = \"\";\r\n    if (error && error.response) {\r\n      switch (error.response.status) {\r\n        case 302:\r\n          message = \"接口重定向了！\";\r\n          break;\r\n        case 401:\r\n          message = \"您未登录，或者登录已经超时，请先登录！\";\r\n          break;\r\n        case 403:\r\n          message = \"您没有权限操作！\";\r\n          break;\r\n        case 404:\r\n          message = `请求地址出错: ${error.response.config.url}`;\r\n          break; // 在正确域名下\r\n        case 500:\r\n          message = \"服务器内部错误！\";\r\n          break;\r\n        case 501:\r\n          message = \"服务未实现！\";\r\n          break;\r\n        case 502:\r\n          message = \"网关错误！\";\r\n          break;\r\n        case 503:\r\n          message = \"服务不可用！\";\r\n          break;\r\n        case 504:\r\n          message = \"服务暂时无法访问，请稍后再试！\";\r\n          break;\r\n        case 505:\r\n          message = \"HTTP版本不受支持！\";\r\n          break;\r\n        default:\r\n          message = \"异常问题，请联系管理员！\";\r\n          break;\r\n      }\r\n    } else if (error.message.includes(\"timeout\")) {\r\n      message = \"请求超时\";\r\n    } else {\r\n      message = \"异常问题，请联系管理员！\";\r\n    }\r\n    requestCount--;\r\n    loading.close();\r\n    Message.error(message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('el-upload',_vm._g(_vm._b({attrs:{\"data\":{ isType: 1, need: 2 },\"action\":\"action\",\"http-request\":_vm.uploadFile}},'el-upload',_vm.$attrs,false),_vm.$listeners),[_c('el-button',{attrs:{\"icon\":\"el-icon-upload2\"}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import axios from \"./axios.js\";\r\n//正常上传\r\nconst uploadNormal = (url, data, headers = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      url,\r\n      method: \"post\",\r\n      data,\r\n      headers: {\r\n        ...headers,\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return resolve(res.data);\r\n      })\r\n      .catch((err) => {\r\n        return reject(err);\r\n      });\r\n  });\r\n};\r\n//分片上传\r\nconst uploadByPieces = async (url, file) => {\r\n  console.log(file, \"file\");\r\n  // 上传过程中用到的变量\r\n  const chunkSize = 5 * 1024 * 1024; // 5MB一片\r\n  const chunkCount = Math.ceil(file.file.size / chunkSize); // 总片数\r\n  // 获取当前chunk数据\r\n  const getChunkInfo = (file, index) => {\r\n    let start = index * chunkSize;\r\n    let end = Math.min(file.file.size, start + chunkSize);\r\n    let chunk = file.file.slice(start, end);\r\n    return { start, end, chunk };\r\n  };\r\n  // 分片上传接口\r\n  const uploadChunk = (data) => {\r\n    return new Promise((resolve, reject) => {\r\n      axios({\r\n        url,\r\n        method: \"post\",\r\n        data,\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return resolve(res.data);\r\n        })\r\n        .catch((err) => {\r\n          return reject(err);\r\n        });\r\n    });\r\n  };\r\n  // 针对单个文件进行chunk上传\r\n  const readChunk = (index) => {\r\n    const { chunk } = getChunkInfo(file, index);\r\n    let fetchForm = new FormData();\r\n    fetchForm.append(\"file\", chunk);\r\n    fetchForm.append(\"index\", index);\r\n    fetchForm.append(\"chunkCount\", chunkCount);\r\n    return uploadChunk(fetchForm);\r\n  };\r\n  // 针对每个文件进行chunk处理\r\n  const promiseList = [];\r\n  try {\r\n    for (let index = 0; index < chunkCount; ++index) {\r\n      promiseList.push(readChunk(index));\r\n    }\r\n    const res = await Promise.all(promiseList);\r\n    return res;\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n};\r\n\r\nexport { uploadNormal, uploadByPieces };\r\n","<!-- 分片上传 -->\r\n<template>\r\n  <el-upload\r\n    :data=\"{ isType: 1, need: 2 }\"\r\n    action=\"action\"\r\n    v-bind=\"$attrs\"\r\n    v-on=\"$listeners\"\r\n    :http-request=\"uploadFile\"\r\n  >\r\n    <el-button icon=\"el-icon-upload2\"></el-button>\r\n  </el-upload>\r\n</template>\r\n<script>\r\n// 引入上传文件方法\r\nimport { uploadNormal, uploadByPieces } from \"@/api/upload.js\";\r\n// Loading\r\nimport { Loading } from \"element-ui\";\r\n\r\nexport default {\r\n  methods: {\r\n    async uploadFile({ data, file }) {\r\n      // data是上传时附带的额外参数，file是文件\r\n      let url = \"/files/upload\"; //上传接口\r\n      let upSize = 5242880; // 上传大小默认5M（5 * 1024 * 1024）\r\n      let loadingInstance = Loading.service({\r\n        text: \"正在上传文件，请稍后...\",\r\n      });\r\n      try {\r\n        // 如果文件小于5MB，直接上传\r\n        if (file.size < upSize) {\r\n          console.log(\"直接上传\");\r\n          let formData = new FormData();\r\n          for (let key in data) {\r\n            formData.append(key, data[key]);\r\n          }\r\n          formData.append(\"file\", file);\r\n          const res = await uploadNormal(url, formData);\r\n          loadingInstance.close();\r\n          return res;\r\n        } else {\r\n          // 如果文件大于等于5MB，分片上传\r\n          console.log(\"分片上传\");\r\n          data.file = file;\r\n          const res = await uploadByPieces(url, data);\r\n          loadingInstance.close();\r\n          return res;\r\n        }\r\n      } catch (e) {\r\n        loadingInstance.close();\r\n        return e;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./slice-upload.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./slice-upload.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./slice-upload.vue?vue&type=template&id=50c86133&\"\nimport script from \"./slice-upload.vue?vue&type=script&lang=js&\"\nexport * from \"./slice-upload.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}